name: $(date:yyyyMMdd)$(rev:.r)_$(Build.BuildId)_$(SourceBranchName)_$(Build.Reason)-integration-test

resources:
  repositories:
    - repository: self
      type: git
      ref: refs/heads/main

trigger:
  branches:
    include:
      - main
  paths:
    exclude:
      - azure-pipeline-integration-test.yml

pr:
  - releases/*

variables:
  - group: Aliyun
  - group: integration_test
  - name: cliname
    value: "smartide"
  - name: buildConfiguration
    value: "Release"
  - name: QuqueTime
    value: $(date:yyyyMMdd)
  - name: ImageName
    value: "smartide-cli"
  - name: ImageTag
    value: $(Build.BuildId)

stages:
  - stage: Build
    jobs:

      - job: build
        displayName: build
        pool: SmartIDESub03-linux-agt
        steps:
          - checkout: self
          - task: replacetokens@4
            inputs:
              rootDirectory: "$(Build.SourcesDirectory)"
              targetFiles: |
                **/stable*.txt
                **/stable*.json
              encoding: "auto"
              tokenPattern: "azpipelines"
              writeBOM: true
              actionOnMissing: "warn"
              keepToken: false
              actionOnNoFiles: "continue"
              enableTransforms: false
              useLegacyPattern: false
              enableTelemetry: true

          - task: Bash@3
            displayName: install tools
            inputs:
              targetType: "inline"
              script: |
                echo "upx installing ... "

                sudo apt sudo apt update -y

                sudo apt install -y upx

          - task: Bash@3
            displayName: go unit test
            inputs:
              targetType: "inline"
              script: |

                go test ./...

          - task: Bash@3
            displayName: go build
            inputs:
              targetType: inline
              script: >-
                echo "golang version"

                go version

                echo "build for linux ..."

                CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o $(cliname)-linux-$(Build.BuildNumber)-x64-origin  -ldflags="-X 'main.BuildTime=$(date "+%Y-%m-%d %H:%M:%S")'"
              
                upx -9 -o $(cliname)-linux-$(Build.BuildNumber)-x64 $(cliname)-linux-$(Build.BuildNumber)-x64-origin
                

                echo "build for windows ..."

                CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -o $(cliname)-win-$(Build.BuildNumber)-x64-origin.exe  -ldflags="-X 'main.BuildTime=$(date "+%Y-%m-%d %H:%M:%S")'"

                upx -9 -o $(cliname)-win-$(Build.BuildNumber)-x64.exe $(cliname)-win-$(Build.BuildNumber)-x64-origin.exe


                echo "build for macos ..."

                ##CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -o $(cliname)-osx-$(Build.BuildNumber)-x64-origin  -ldflags="-X 'main.BuildTime=$(date "+%Y-%m-%d %H:%M:%S")'"

                ##upx -9 -o $(cliname)-osx-$(Build.BuildNumber)-x64 $(cliname)-osx-$(Build.BuildNumber)-x64-origin

                CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -o $(cliname)-osx-$(Build.BuildNumber)-x64  -ldflags="-X 'main.BuildTime=$(date "+%Y-%m-%d %H:%M:%S")'"

                #sudo ls **/*$(cliname)-*-**

          - task: CopyFiles@2
            displayName: Copy Files
            inputs:
              SourceFolder: "$(Build.SourcesDirectory)"
              Contents: |
                ##**/*$(cliname)-*-**[!'origin|origin.exe']
                $(cliname)-win-$(Build.BuildNumber)-x64.exe
                $(cliname)-linux-$(Build.BuildNumber)-x64
                $(cliname)-osx-$(Build.BuildNumber)-x64
                **/stable*.txt
                **/stable*.json
              TargetFolder: "$(Build.ArtifactStagingDirectory)"
          - task: PublishBuildArtifacts@1
            displayName: Publish artifact
            condition: succeededOrFailed()

  - stage: AKS_Start
    dependsOn: Build
    jobs:
    - job: aksStart
      displayName: "aks start"
      pool: SmartIDESub03-linux-agt
      steps:
          - checkout: none

          - task: AzureCLI@2
            displayName: start aks
            inputs:
              azureSubscription: 'integration-test-aks'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: 'az aks start --resource-group jason-aks --name jason-aks --subscription 43cb168b-901c-49be-9e6c-37a4d0940b33'

  - stage: Integration_Test_windows
    dependsOn: AKS_Start
    jobs:
    - job: vmStart
      displayName: "vm start"
      pool: SmartIDESub03-linux-agt
      steps:

          - task: AzureCLI@2
            displayName: startup windows vm
            inputs:
              azureSubscription: 'smartide-win-server-eng-testvm01'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: 'az vm start --resource-group smartide-win-server-eng-testvm01 --name smartide-winserver-eng-testvm01 --subscription 12ab281f-876f-4e7d-8a43-0cab78d05744'

          - task: AzureCLI@2
            displayName: startup remote vitural machine for windows test
            inputs:
              azureSubscription: 'integration-test-000'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: 'az vm start --resource-group experiment-002 --name experiment-002 --subscription 4603be58-9bf3-4aa4-bfb5-ac9c5462cf0e'

          - task: PowerShell@2
            displayName: waiting for vm running
            inputs:
              targetType: 'inline'
              script: |
                Start-Sleep -Seconds 66
              failOnStderr: true
 
    - job: windowsTest
      dependsOn: vmStart
      displayName: "windows test"
      pool: integration-test-win10
      steps:
          - checkout: none

          - task: DownloadBuildArtifacts@1
            inputs:
              buildType: "current"
              downloadType: "single"
              artifactName: "drop"
              itemPattern: "**/*$(cliname)-win-**-x64.exe"
              downloadPath: "$(Build.SourcesDirectory)"

          - task: PowerShell@2
            displayName: rename cli
            inputs:
              targetType: 'inline'
              script: |
                Move-Item -force .\$(cliname)-win-**-x64.exe ..\$(cliname).exe
              failOnStderr: true
              workingDirectory: $(Build.SourcesDirectory)/drop

          - task: PowerShell@2
            displayName: new(local) + stop + remove test
            inputs:
              targetType: 'inline'
              script: |
                Write-Host 'clean up ---------------------------------------------------------------------------------'
                .\$(cliname) version
                .\$(cliname) reset -ya -d

                Write-Host 'new local ---------------------------------------------------------------------------------'
                $FolderPath = ".\newtest"
                if (Test-Path $FolderPath) {
                  Remove-Item ("{0}{1}" -f $FolderPath,'\*') -Force -Recurse
                }else{
                  New-Item -ItemType "directory" -Path $FolderPath
                }
                cd $FolderPath
                ..\$(cliname) new node -t _default -d --unforward
                cd ..

                Write-Host 'stop ---------------------------------------------------------------------------------'
                .\$(cliname) list -d 
                .\$(cliname) get 1 -d
                .\$(cliname) stop 1 -d

                Write-Host 'stop && remove ---------------------------------------------------------------------------------'
                .\$(cliname) start 1 -d --unforward
                .\$(cliname) stop 1 -d
                .\$(cliname) remove 1 -yfpi -d                

              workingDirectory: $(Build.SourcesDirectory)

          - task: SSH@0
            displayName: clean up remote vitural machine for windows test
            inputs:
              sshEndpoint: 'ssh-experiment-002'
              runOptions: 'inline'
              inline: |
                [[ $(docker ps -aq) != '' ]] && sudo docker rm -f $(docker ps -aq)  || echo 'docker container empty'
                rm -rf ~/project
                rm -rf ~/.ssh
                rm -rf ~/.gitconfig
              readyTimeout: '200000'

          - task: PowerShell@2
            displayName: new(remote) + stop + remove test
            inputs:
              targetType: 'inline'
              script: |
                Write-Host 'clean up ---------------------------------------------------------------------------------'
                .\$(cliname) version
                .\$(cliname) reset -ya -d

                Write-Host 'new remote ---------------------------------------------------------------------------------'
                .\$(cliname) new node -t _default -d --unforward --workspacename test001 --host $(integration_test.vm.host) --port $(integration_test.vm.hostport) --username $(integration_test.vm.username) --password $(integration_test.vm.password)

                Write-Host 'stop ---------------------------------------------------------------------------------'
                .\$(cliname) list -d 
                .\$(cliname) get 1 -d
                .\$(cliname) stop 1 -d

                Write-Host 'stop && remove ---------------------------------------------------------------------------------'
                .\$(cliname) start 1 -d --unforward
                .\$(cliname) stop 1 -d
                .\$(cliname) remove 1 -yfpi -d  
              workingDirectory: $(Build.SourcesDirectory)

          - task: PowerShell@2
            displayName: start(local) + stop + remove test
            inputs:
              targetType: 'inline'
              script: |
                Write-Host 'clean up ---------------------------------------------------------------------------------'
                .\$(cliname) version
                .\$(cliname) reset -ya -d

                Write-Host 'new local ---------------------------------------------------------------------------------'
                $FolderPath = ".\boathouse-calculator"
                if (Test-Path $FolderPath) {
                  Remove-Item ("{0}{1}" -f $FolderPath,'\*') -Force -Recurse
                }  
                git clone https://github.com/idcf-boat-house/boathouse-calculator.git $FolderPath
                cd boathouse-calculator
                ..\$(cliname) start --unforward

                Write-Host 'stop ---------------------------------------------------------------------------------'
                ..\$(cliname) list -d 
                ..\$(cliname) get 1 -d
                ..\$(cliname) stop -d

                Write-Host 'stop && remove ---------------------------------------------------------------------------------'
                ..\$(cliname) start -d --unforward
                ..\$(cliname) stop -d
                ..\$(cliname) remove -yfpi -d        
              workingDirectory: $(Build.SourcesDirectory)

          - task: SSH@0
            displayName: clean up remote vitural machine for windows test
            inputs:
              sshEndpoint: 'ssh-experiment-002'
              runOptions: 'inline'
              inline: |
                [[ $(docker ps -aq) != '' ]] && sudo docker rm -f $(docker ps -aq)  || echo 'docker container empty'
                rm -rf ~/project
                rm -rf ~/.ssh
                rm -rf ~/.gitconfig
              readyTimeout: '200000'
              
          - task: PowerShell@2
            displayName: start(remote) + stop + remove test
            inputs:
              targetType: 'inline'
              script: |
                Write-Host 'clean up ---------------------------------------------------------------------------------'
                .\$(cliname) version
                .\$(cliname) reset -ya -d

                Write-Host 'new remote ---------------------------------------------------------------------------------'
                .\$(cliname) start -d --unforward --host $(integration_test.vm.host) --port $(integration_test.vm.hostport) --username $(integration_test.vm.username) --password $(integration_test.vm.password) --repourl https://github.com/idcf-boat-house/boathouse-calculator.git 

                Write-Host 'stop ---------------------------------------------------------------------------------'
                .\$(cliname) list -d 
                .\$(cliname) get 1 -d
                .\$(cliname) stop 1 -d

                Write-Host 'stop && remove ---------------------------------------------------------------------------------'
                .\$(cliname) start 1 -d --unforward
                .\$(cliname) stop 1 -d
                .\$(cliname) remove 1 -yfpi -d  
              workingDirectory: $(Build.SourcesDirectory)

          - task: PowerShell@2
            displayName: k8s test
            inputs:
              targetType: 'inline'
              script: |
                #Write-Host 'clean up ---------------------------------------------------------------------------------'
                .\$(cliname) version
                .\$(cliname) reset -ya -d

                Write-Host 'create k8s workspace ---------------------------------------------------------------------------------'
                .\$(cliname) start --k8s smartide-k8s-test -d --unforward  --repourl https://github.com/idcf-boat-house/boathouse-calculator.git

                Write-Host 'show info ---------------------------------------------------------------------------------'
                .\$(cliname) list -d 
                .\$(cliname) get 1 -d

                Write-Host 'remove ---------------------------------------------------------------------------------'
                .\$(cliname) remove 1 -yfpi -d  
              workingDirectory: $(Build.SourcesDirectory)

          - task: PowerShell@2
            displayName: connect server workspace
            inputs:
              targetType: 'inline'
              script: |
                Write-Host 'clean up ---------------------------------------------------------------------------------'
                .\$(cliname) version
                .\$(cliname) reset -ya -d

                Write-Host 'login ---------------------------------------------------------------------------------'
                .\$(cliname) login $(integration_test.server.host) --username $(integration_test.server.username) --password $(integration_test.server.password) 

                Write-Host 'stop ---------------------------------------------------------------------------------'
                .\$(cliname) connect -d --unforward

                Write-Host 'logout ---------------------------------------------------------------------------------'
                .\$(cliname) logout

              workingDirectory: $(Build.SourcesDirectory)

    - job: vmShutdonw
      displayName: "vm shutdown"
      dependsOn: windowsTest
      pool: SmartIDESub03-linux-agt
      steps:
          - task: AzureCLI@2
            displayName: shutdown windows server vm
            inputs:
              azureSubscription: 'smartide-win-server-eng-testvm01'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: 'az vm stop --resource-group smartide-win-server-eng-testvm01 --name smartide-winserver-eng-testvm01 --subscription 12ab281f-876f-4e7d-8a43-0cab78d05744'

          - task: AzureCLI@2
            displayName: stop remote vitural machine 
            inputs:
              azureSubscription: 'integration-test-000'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: 'az vm stop --resource-group experiment-002 --name experiment-002 --subscription 4603be58-9bf3-4aa4-bfb5-ac9c5462cf0e'

  # - stage: Integration_Test_mac
  #   dependsOn: AKS_Start
  #   jobs:
  #   - job: vmStart
  #     displayName: "vm start"
  #     pool: SmartIDESub03-linux-agt
  #     steps:

  #         - task: AzureCLI@2
  #           displayName: startup remote vitural machine
  #           inputs:
  #             azureSubscription: 'integration-test-001'
  #             scriptType: 'bash'
  #             scriptLocation: 'inlineScript'
  #             inlineScript: 'az vm start --resource-group INTEGRATION-TEST-001 --name INTEGRATION-TEST-001 --subscription 4603be58-9bf3-4aa4-bfb5-ac9c5462cf0e'

  #         - task: SSH@0
  #           displayName: clean up remote vitural machine for windows test
  #           inputs:
  #             sshEndpoint: 'ssh-integration-test-001'
  #             runOptions: 'inline'
  #             inline: |                
  #               [[ $(docker ps -aq) != '' ]] && sudo docker rm -f $(docker ps -aq)  || echo 'docker container empty'
  #               rm -rf ~/project
  #             readyTimeout: '20000'

  #   - job: macTest
  #     dependsOn: vmStart
  #     displayName: "mac test"
  #     pool: Mac
  #     workspace:
  #       clean: all
  #     steps:
  #         - checkout: none

  #         - task: DownloadBuildArtifacts@1
  #           inputs:
  #             buildType: "current"
  #             downloadType: "single"
  #             artifactName: "drop"
  #             itemPattern: "**/$(cliname)-osx-**-x64"
  #             downloadPath: "$(Build.SourcesDirectory)"
  #         - task: Bash@3
  #           displayName: rename cli
  #           inputs:
  #             targetType: "inline"
  #             script: | 
  #               ls ./drop
  #               mv ./drop/$(cliname)-osx-**-x64 $(cliname)
  #               chmod +x $(cliname)
  #             workingDirectory: $(Build.SourcesDirectory)
            
  #         - task: Bash@3
  #           displayName: new(local) + stop + remove test
  #           inputs:
  #             targetType: "inline"
  #             script: |
  #               exit 101

  #               echo 'clean up ---------------------------------------------------------------------------------'
  #               ./$(cliname) version
  #               ./$(cliname) reset -ya -d

  #               echo 'new local ---------------------------------------------------------------------------------'
  #               FolderPath="newtest"
  #               [[ -d $FolderPath ]] && 'folder is exists' || mkdir $FolderPath
  #               cd $FolderPath
  #               ../$(cliname) new node -t _default -d --unforward
  #               cd ..

  #               echo 'stop ---------------------------------------------------------------------------------'
  #               ./$(cliname) list -d 
  #               ./$(cliname) get 1 -d
  #               ./$(cliname) stop 1 -d

  #               echo 'stop && remove ---------------------------------------------------------------------------------'
  #               ./$(cliname) start 1 -d --unforward
  #               ./$(cliname) stop 1 -d
  #               ./$(cliname) remove 1 -yfpi -d 
  #             workingDirectory: $(Build.SourcesDirectory)

  #   - job: vmShutdonw
  #     displayName: "vm shutdown"
  #     dependsOn: macTest
  #     pool: SmartIDESub03-linux-agt
  #     steps:

  #         - task: AzureCLI@2
  #           displayName: stop remote vitural machine 
  #           inputs:
  #             azureSubscription: 'integration-test-001'
  #             scriptType: 'bash'
  #             scriptLocation: 'inlineScript'
  #             inlineScript: 'az vm stop --resource-group INTEGRATION-TEST-001 --name INTEGRATION-TEST-001 --subscription 4603be58-9bf3-4aa4-bfb5-ac9c5462cf0e'


  - stage: Integration_Test_ubuntu
    dependsOn: AKS_Start
    jobs:
    - job: vmStart
      displayName: "vm start"
      pool: SmartIDESub03-linux-agt
      steps:
          - task: AzureCLI@2
            displayName: startup remote vitural machine for windows test
            inputs:
              azureSubscription: 'integration-test-002'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: 'az vm start --resource-group INTEGRATION-TEST-002 --name INTEGRATION-TEST-002 --subscription 4603be58-9bf3-4aa4-bfb5-ac9c5462cf0e'

          - task: AzureCLI@2
            displayName: start ubuntu agent vm
            inputs:
              azureSubscription: 'integration-test-ubuntu-agent'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: 'az vm start --resource-group experiment-007 --name experiment-007 --subscription 4603be58-9bf3-4aa4-bfb5-ac9c5462cf0e'

          - task: Bash@3
            displayName: waiting for vm running
            inputs:
              targetType: 'inline'
              script: |
                sleep 66s



    - job: linuxTest
      dependsOn: vmStart
      displayName: "linux test"
      pool: integration-test-ubuntu
      workspace:
        clean: all
      steps:
          - checkout: none

          - task: DownloadBuildArtifacts@1
            inputs:
              buildType: "current"
              downloadType: "single"
              artifactName: "drop"
              itemPattern: "**/*$(cliname)-linux-**-x64*"
              downloadPath: "$(Build.SourcesDirectory)"
          - task: Bash@3
            inputs:
              targetType: "inline"
              script: | 
                ls ./drop
                mv ./drop/$(cliname)-linux-**-x64 $(cliname)
                chmod +x $(cliname)
              workingDirectory: $(Build.SourcesDirectory)
            displayName: renamecli

          - task: Bash@3
            displayName: new(local) + stop + remove test            
            inputs:
              targetType: "inline"
              workingDirectory: $(Build.SourcesDirectory)
              script: |
                echo 'clean up ---------------------------------------------------------------------------------'
                ./$(cliname) version
                ./$(cliname) reset -ya -d

                echo 'new local ---------------------------------------------------------------------------------'
                FolderPath="newtest"
                [[ -d $FolderPath ]] && 'folder is exists' || mkdir $FolderPath
                cd $FolderPath
                ../$(cliname) new node -t _default -d --unforward
                cd ..

                echo 'stop ---------------------------------------------------------------------------------'
                ./$(cliname) list -d 
                ./$(cliname) get 1 -d
                ./$(cliname) stop 1 -d

                echo 'stop && remove ---------------------------------------------------------------------------------'
                ./$(cliname) start 1 -d --unforward
                ./$(cliname) stop 1 -d
                ./$(cliname) remove 1 -yfpi -d 

          - task: SSH@0
            displayName: clean up remote vitural machine 
            inputs:
              sshEndpoint: 'ssh-integration-test-002'
              runOptions: 'inline'
              inline: |                
                [[ $(docker ps -aq) != '' ]] && sudo docker rm -f $(docker ps -aq)  || echo 'docker container empty'
                rm -rf ~/project
                rm -rf ~/.ssh
                rm -rf ~/.gitconfig
              readyTimeout: '200000'

          - task: Bash@3
            displayName: new(remote) + stop + remove test
            inputs:
              workingDirectory: $(Build.SourcesDirectory)
              targetType: 'inline'
              script: |
                echo 'clean up ---------------------------------------------------------------------------------'
                ./$(cliname) version
                ./$(cliname) reset -ya -d

                echo 'new remote ---------------------------------------------------------------------------------'
                ./$(cliname) new node -t _default -d --unforward --workspacename test001 --host $(integration_test.vm.host3) --port $(integration_test.vm.hostport3) --username $(integration_test.vm.username) --password $(integration_test.vm.password)

                echo 'stop ---------------------------------------------------------------------------------'
                ./$(cliname) list -d 
                ./$(cliname) get 1 -d
                ./$(cliname) stop 1 -d

                echo 'stop && remove ---------------------------------------------------------------------------------'
                ./$(cliname) start 1 -d --unforward
                ./$(cliname) stop 1 -d
                ./$(cliname) remove 1 -yfpi -d  

          - task: Bash@3
            displayName: start(local) + stop + remove test
            inputs:
              workingDirectory: $(Build.SourcesDirectory)
              targetType: 'inline'
              script: |
                echo 'clean up ---------------------------------------------------------------------------------'
                ./$(cliname) version
                ./$(cliname) reset -ya -d

                echo 'new local ---------------------------------------------------------------------------------'
                FolderPath="./boathouse-calculator"    
                git clone https://github.com/idcf-boat-house/boathouse-calculator.git $FolderPath
                cd $FolderPath
                ../$(cliname) start --unforward

                echo 'stop ---------------------------------------------------------------------------------'
                ../$(cliname) list -d 
                ../$(cliname) get 1 -d
                ../$(cliname) stop -d

                echo 'stop && remove ---------------------------------------------------------------------------------'
                ../$(cliname) start -d --unforward
                ../$(cliname) stop -d
                ../$(cliname) remove -yfpi -d        

          - task: SSH@0
            displayName: clean up remote vitural machine 
            inputs:
              sshEndpoint: 'ssh-integration-test-002'
              runOptions: 'inline'
              inline: |                
                [[ $(docker ps -aq) != '' ]] && sudo docker rm -f $(docker ps -aq)  || echo 'docker container empty'
                rm -rf ~/project
                rm -rf ~/.ssh
                rm -rf ~/.gitconfig
              readyTimeout: '200000'

          - task: Bash@3
            displayName: start(remote) + stop + remove test
            inputs:
              workingDirectory: $(Build.SourcesDirectory)
              targetType: 'inline'
              script: |
                echo 'clean up ---------------------------------------------------------------------------------'
                ./$(cliname) version
                ./$(cliname) reset -ya -d

                echo 'new remote ---------------------------------------------------------------------------------'
                ./$(cliname) start -d --unforward --host $(integration_test.vm.host3) --port $(integration_test.vm.hostport3) --username $(integration_test.vm.username) --password $(integration_test.vm.password) --repourl https://github.com/idcf-boat-house/boathouse-calculator.git 

                echo 'stop ---------------------------------------------------------------------------------'
                ./$(cliname) list -d 
                ./$(cliname) get 1 -d
                ./$(cliname) stop 1 -d

                echo 'stop && remove ---------------------------------------------------------------------------------'
                ./$(cliname) start 1 -d --unforward
                ./$(cliname) stop 1 -d
                ./$(cliname) remove 1 -yfpi -d  

          - task: Bash@3
            displayName: k8s test
            inputs:
              targetType: 'inline'
              script: |
                echo 'clean up ---------------------------------------------------------------------------------------------'
                ./$(cliname) version
                ./$(cliname) reset -ya -d

                echo 'create k8s workspace ---------------------------------------------------------------------------------'
                ./$(cliname) start --k8s smartide-k8s-test -d --unforward  --repourl https://github.com/idcf-boat-house/boathouse-calculator.git

                echo 'show info --------------------------------------------------------------------------------------------'
                ./$(cliname) list -d 
                ./$(cliname) get 1 -d

                echo 'remove -----------------------------------------------------------------------------------------------'
                ./$(cliname) remove 1 -yfpi -d  
              workingDirectory: $(Build.SourcesDirectory)

          - task: Bash@3
            displayName: connect server workspace
            inputs:
              targetType: 'inline'
              script: |
                echo 'clean up ---------------------------------------------------------------------------------'
                ./$(cliname) version
                ./$(cliname) reset -ya -d

                echo 'login ------------------------------------------------------------------------------------'
                ./$(cliname) login $(integration_test.server.host) --username $(integration_test.server.username) --password $(integration_test.server.password) 

                echo 'stop -------------------------------------------------------------------------------------'
                ./$(cliname) connect -d --unforward

                echo 'logout -----------------------------------------------------------------------------------'
                ./$(cliname) logout

    - job: vmShutdonw
      displayName: "vm shutdown"
      dependsOn: linuxTest
      pool: SmartIDESub03-linux-agt
      steps:
          - task: AzureCLI@2
            displayName: stop remote vitural machine 
            inputs:
              azureSubscription: 'integration-test-002'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: 'az vm stop --resource-group INTEGRATION-TEST-002 --name INTEGRATION-TEST-002 --subscription 4603be58-9bf3-4aa4-bfb5-ac9c5462cf0e'

          - task: AzureCLI@2
            displayName: stop ubuntu agent vm
            inputs:
              azureSubscription: 'integration-test-ubuntu-agent'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: 'az vm stop --resource-group experiment-007 --name experiment-007 --subscription 4603be58-9bf3-4aa4-bfb5-ac9c5462cf0e'

  # - stage: AKS_Stop
  #   dependsOn: [ Integration_Test_windows,  Integration_Test_ubuntu ] ## Integration_Test_mac,
  #   jobs:
  #   - job: vmStop
  #     displayName: "vm stop"
  #     pool: SmartIDESub03-linux-agt
  #     steps:

  #         - task: AzureCLI@2
  #           displayName: stop aks
  #           inputs:
  #             azureSubscription: 'integration-test-aks'
  #             scriptType: 'bash'
  #             scriptLocation: 'inlineScript'
  #             inlineScript: 'az aks stop --resource-group smartide-k8s-test --name smartide-k8s-test --subscription 2d660de6-59b3-406f-a6a6-14e86441be5c'

